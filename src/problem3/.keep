/*
List out the computational inefficiencies and anti-patterns found in the code block below.

1. This code block uses
    1. ReactJS with TypeScript.
    2. Functional components.
    3. React Hooks
2. Implement the Datasource class so that it can retrieve the prices required.
3. You should explicitly state the issues and explain how to improve them.
4. You should also provide a refactored version of the code.
*/

/*
// need to add a "blockchain" attribute
interface WalletBalance {
  currency: string;
  amount: number;
}

// this can just extends from WalletBalance and add additional attribute "formatted"
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

class Datasource {
  // TODO: Implement datasource class
}

// BoxProps was not imported
interface Props extends BoxProps {

}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
	const [prices, setPrices] = useState({}); // should be an array

  useEffect(() => {
    const datasource = new Datasource("https://interview.switcheo.com/prices.json");
    datasource.getPrices().then(prices => {
      setPrices(prices);
    }).catch(error => {
      console.err(error);
    });
  }, []);

  // instead of any for blockchain type we can use string
	const getPriority = (blockchain: any): number => {
	  switch (blockchain) {
	    case 'Osmosis':
	      return 100
	    case 'Ethereum':
	      return 50
	    case 'Arbitrum':
	      return 30
	    case 'Zilliqa':
	      return 20
	    case 'Neo':
	      return 20
	    default:
	      return -99
	  }
	}

  const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain); // WalletBalance do not have blockchain
      // can simplify into one if statement
		  if (lhsPriority > -99) { // lhsPriority not found (should be balancePriority)
		     if (balance.amount <= 0) { 
		       return true;
		     }
		  }
		  return false
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain); // WalletBalance do not have blockchain
		  const rightPriority = getPriority(rhs.blockchain); // WalletBalance do not have blockchain

      // can simplify into one if statement
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
    });
  }, [balances, prices]);

  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed() // need to state the decimal place that you want to fixed to
    }
  })

  // should be using formattedBalances instead of sortedBalances
  const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    return (
      <WalletRow 
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.formatted}
      />
    )
  })

  return (
    <div {...rest}>
      {rows}
    </div>
  )
}
*/

// to handle the extends
import { BoxProps } from '@mui/material'

interface WalletBalance {
  currency: string
  amount: number
  blockchain: string
}

// can just extends WalletBalance remove the repeating attribute
interface FormattedWalletBalance extends WalletBalance {
  formatted: string
}

class Datasource {
  // TODO: Implement datasource class
  url: string

  constructor(url: string) {
    this.url = url
  }

  async getPrices() {
    try {
      const res = await fetch(this.url)

      if (res) {
        const data = await res.json()
        return data
      }
    } catch (error) {
      console.log(error)
      return []
    }
  }
}

interface Props extends BoxProps {}

const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props
  const balances = useWalletBalances()
  const [prices, setPrices] = useState([]) // should be an array

  useEffect(() => {
    const datasource = new Datasource(
      'https://interview.switcheo.com/prices.json'
    )
    datasource
      .getPrices()
      .then((prices) => {
        setPrices(prices)
      })
      .catch((error) => {
        console.log(error)
      })
  }, [])

  const getPriority = (blockchain: string): number => {
    // instead of any can use string
    switch (blockchain) {
      case 'Osmosis':
        return 100
      case 'Ethereum':
        return 50
      case 'Arbitrum':
        return 30
      case 'Zilliqa':
        return 20
      case 'Neo':
        return 20
      default:
        return -99
    }
  }

  const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => {
        const balancePriority = getPriority(balance.blockchain) // WalletBalance do not have blockchain
        // this will return true or false
        return balancePriority > -99 && balance.amount <= 0 // lhsPriority not found (should be balancePriority)
      })
      .sort((lhs: WalletBalance, rhs: WalletBalance) => {
        const leftPriority = getPriority(lhs.blockchain) // WalletBalance do not have blockchain
        const rightPriority = getPriority(rhs.blockchain) // WalletBalance do not have blockchain

        // if right smaller will return negative number
        return rightPriority - leftPriority
      })
  }, [balances, prices])

  // not being used
  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed(2), // fixed to 2 dp
    }
  })

  // should be using formattedBalances
  const rows = formattedBalances.map(
    (balance: FormattedWalletBalance, index: number) => {
      const usdValue = prices[balance.currency] * balance.amount
      return (
        <WalletRow
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      )
    }
  )

  return <div {...rest}>{rows}</div>
}
